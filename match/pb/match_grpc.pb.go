// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: match.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchService_UplaodPhotos_FullMethodName       = "/MatchService/UplaodPhotos"
	MatchService_SaveUserPrefrences_FullMethodName = "/MatchService/SaveUserPrefrences"
	MatchService_GetMatchedUsers_FullMethodName    = "/MatchService/GetMatchedUsers"
	MatchService_CreateIntrests_FullMethodName     = "/MatchService/CreateIntrests"
)

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServiceClient interface {
	UplaodPhotos(ctx context.Context, opts ...grpc.CallOption) (MatchService_UplaodPhotosClient, error)
	SaveUserPrefrences(ctx context.Context, in *UserPrefrencesRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	GetMatchedUsers(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	CreateIntrests(ctx context.Context, in *IntrestRequest, opts ...grpc.CallOption) (*MatchResponse, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) UplaodPhotos(ctx context.Context, opts ...grpc.CallOption) (MatchService_UplaodPhotosClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchService_ServiceDesc.Streams[0], MatchService_UplaodPhotos_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &matchServiceUplaodPhotosClient{stream}
	return x, nil
}

type MatchService_UplaodPhotosClient interface {
	Send(*PhotoRequest) error
	CloseAndRecv() (*MatchResponse, error)
	grpc.ClientStream
}

type matchServiceUplaodPhotosClient struct {
	grpc.ClientStream
}

func (x *matchServiceUplaodPhotosClient) Send(m *PhotoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *matchServiceUplaodPhotosClient) CloseAndRecv() (*MatchResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *matchServiceClient) SaveUserPrefrences(ctx context.Context, in *UserPrefrencesRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, MatchService_SaveUserPrefrences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) GetMatchedUsers(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, MatchService_GetMatchedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) CreateIntrests(ctx context.Context, in *IntrestRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, MatchService_CreateIntrests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
// All implementations must embed UnimplementedMatchServiceServer
// for forward compatibility
type MatchServiceServer interface {
	UplaodPhotos(MatchService_UplaodPhotosServer) error
	SaveUserPrefrences(context.Context, *UserPrefrencesRequest) (*MatchResponse, error)
	GetMatchedUsers(context.Context, *UserIdRequest) (*MatchResponse, error)
	CreateIntrests(context.Context, *IntrestRequest) (*MatchResponse, error)
	mustEmbedUnimplementedMatchServiceServer()
}

// UnimplementedMatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (UnimplementedMatchServiceServer) UplaodPhotos(MatchService_UplaodPhotosServer) error {
	return status.Errorf(codes.Unimplemented, "method UplaodPhotos not implemented")
}
func (UnimplementedMatchServiceServer) SaveUserPrefrences(context.Context, *UserPrefrencesRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserPrefrences not implemented")
}
func (UnimplementedMatchServiceServer) GetMatchedUsers(context.Context, *UserIdRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchedUsers not implemented")
}
func (UnimplementedMatchServiceServer) CreateIntrests(context.Context, *IntrestRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntrests not implemented")
}
func (UnimplementedMatchServiceServer) mustEmbedUnimplementedMatchServiceServer() {}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_UplaodPhotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatchServiceServer).UplaodPhotos(&matchServiceUplaodPhotosServer{stream})
}

type MatchService_UplaodPhotosServer interface {
	SendAndClose(*MatchResponse) error
	Recv() (*PhotoRequest, error)
	grpc.ServerStream
}

type matchServiceUplaodPhotosServer struct {
	grpc.ServerStream
}

func (x *matchServiceUplaodPhotosServer) SendAndClose(m *MatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *matchServiceUplaodPhotosServer) Recv() (*PhotoRequest, error) {
	m := new(PhotoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MatchService_SaveUserPrefrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrefrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).SaveUserPrefrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_SaveUserPrefrences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).SaveUserPrefrences(ctx, req.(*UserPrefrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_GetMatchedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).GetMatchedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_GetMatchedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).GetMatchedUsers(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_CreateIntrests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).CreateIntrests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_CreateIntrests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).CreateIntrests(ctx, req.(*IntrestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUserPrefrences",
			Handler:    _MatchService_SaveUserPrefrences_Handler,
		},
		{
			MethodName: "GetMatchedUsers",
			Handler:    _MatchService_GetMatchedUsers_Handler,
		},
		{
			MethodName: "CreateIntrests",
			Handler:    _MatchService_CreateIntrests_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UplaodPhotos",
			Handler:       _MatchService_UplaodPhotos_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "match.proto",
}
